from math import sqrt
from generate_mesh import *

class calculate_energy():
    def __init__(self):

        self.acc_file=modify_file()
        #weight of rep_atom k
        self.n_k=[]
        #store energies of clusters
        self.eng_clusters=[]
        #total enegy
        self.qc_eng=0.0
        #Ar
        self.epsilon=1.0
        #Ar
        self.sigma=1.0
        if self.acc_file.guideactive==True:
            self.lennard_jones(float(self.acc_file.cut_off),-1)

    def lennard_jones(self,*args):
        cut_off=args[0]
        first_atom_id=args[1]
        if len(args)==3:
            second_atom_id=args[2]

        #k set of voro-cells
        #number of voro cells equalls number rep-atoms
        acc_msh=gen_mesh()
        if self.acc_file.guideactive==True:
            gen_mesh.sent_to_enegy(acc_msh)
        else:
            gen_mesh.on_mesh_click(acc_msh)
            gen_mesh.generate_clusters(acc_msh,cut_off)
            if len(args)==2:
                gen_mesh.voro_diag(acc_msh,first_atom_id)
            else:
                gen_mesh.voro_diag(acc_msh,first_atom_id,second_atom_id)
        #compue weighting factors
        for k in range(len(acc_msh.rep_atoms)):

            self.n_k.append(acc_msh.area_cell[k]/acc_msh.varea)

        acc_file=modify_file()
        modify_file.sent_to_meshf(acc_file)

        #cluster k
        for k in range(len(acc_msh.rep_atoms)):
            eng_cluster_k=0.0
            #atom i in cluster k
            for i in acc_msh.atoms_in_cluster[k]:
                eng_atom_i=0.0
                #numpy::number()
                # j is set of all atoms
                for j in range(acc_file.numatoms):
                    eng_ij=0.0
                    delx=float(acc_file.xa[i]-acc_file.xa[j])
                    dely=float(acc_file.ya[i]-acc_file.ya[j])
                    r_ij=delx*delx+dely*dely
                    if  r_ij>0. :
                        r2inv_ij=1.0/r_ij
                        r6inv_ij=float(r2inv_ij*r2inv_ij*r2inv_ij)
                    if r_ij>0. and r_ij<=float(sqrt(10.0)) and j<i:
                        lj1 = float(self.sigma**6.0)
                        lj2= lj1*lj1
                        eng_ij+=float(4.0*self.epsilon*r6inv_ij*(lj2*r6inv_ij-lj1))
                        eng_atom_i+=float(eng_ij)
                eng_cluster_k+=float(eng_atom_i)
            self.eng_clusters.append(1.0*float(eng_cluster_k))

        #sum the energies of all atoms in clusters
        for l in range(len(self.eng_clusters)):
            self.qc_eng+=float(self.eng_clusters[l])
        print(float(self.qc_eng))

acc_file=modify_file()
if acc_file.guideactive==True:
    if __name__ == '__main__':
        calculate_energy()
